import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as u,c as d,a as n,d as s,e as a,b as k,w as t,f as p}from"./app-d4c211ae.js";const h={},v={href:"https://labuladong.github.io/algo/",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"labuladong的算法小抄",-1),m={href:"https://programmercarl.com/",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"代码随想录",-1),g=n("blockquote",null,[n("p",null,[s("上述两位大佬的算法讲解已经十分完善，故本笔记只记录一些"),n("strong",null,"重难点"),s("或笔者认为"),n("strong",null,"精妙"),s("的部分，如需系统学习，请移步上述网址。")])],-1),f=p('<h2 id="一刷-labuladong的算法小抄" tabindex="-1"><a class="header-anchor" href="#一刷-labuladong的算法小抄" aria-hidden="true">#</a> 一刷-labuladong的算法小抄</h2><div class="hint-container info"><p class="hint-container-title">写在前面</p><p>实习前正式准备的一刷(<code>20230911</code>)，旨在尽可能全面地记录和记忆，本章可能稍显繁琐😁。</p><blockquote><p>算法工程师研究的算法为「<strong>数学算法</strong>」，刷题面试的算法为「<strong>计算机算法</strong>」。本笔记主要聚焦的是「<strong>计算机算法</strong>」</p></blockquote></div><h3 id="chap0-核心框架汇总" tabindex="-1"><a class="header-anchor" href="#chap0-核心框架汇总" aria-hidden="true">#</a> CHAP0- 核心框架汇总</h3><h4 id="_1-数据结构的存储方式" tabindex="-1"><a class="header-anchor" href="#_1-数据结构的存储方式" aria-hidden="true">#</a> 1. 数据结构的存储方式</h4><p>数据结构的存储方式只有两种：数组（顺序存储）和链表（链式存储）<br> 数组和链表才是「结构基础」。其他多样化的数据结构，究其源头，都是在链表或者数组上的特殊操作。</p><ul><li>「队列」、「栈」这两种数据结构既可以使用链表也可以使用数组实现</li><li>「图」的两种表示方法，邻接表就是链表，邻接矩阵就是二维数组</li><li>「散列表」就是通过散列函数把键映射到一个大数组里</li><li>「树」，用数组实现就是「堆」，「堆」是一个完全二叉树；用链表实现就是很常见的那种「树」，因为不一定是完全二叉树，所以不适合用数组存储</li></ul><h4 id="_2-数据结构的基本操作" tabindex="-1"><a class="header-anchor" href="#_2-数据结构的基本操作" aria-hidden="true">#</a> 2. 数据结构的基本操作</h4><div class="hint-container tip"><p class="hint-container-title">数据结构的遍历</p><p>各种数据结构的遍历 + 访问无非两种形式：<strong>线性</strong>的和<strong>非线性</strong>的。<br> 线性就是 <code>for/while</code> 迭代为代表，非线性就是<strong>递归</strong>为代表。</p></div><ul><li>数组遍历框架，典型的线性迭代结构：</li></ul>',9),w=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" arr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" arr"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 迭代访问"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),s("vector"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"&"),s(" arr"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" arr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"size"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 迭代访问"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("ul",null,[n("li",null,"链表遍历框架，兼具迭代和递归结构：")],-1),x=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"ListNode"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" val"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token class-name"},"ListNode"),s(" next"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token doc-comment comment"},"/** 迭代访问 */"),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),s(" head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),s(" p "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(" p "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(" p "),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 迭代访问p.val"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token doc-comment comment"},"/** 递归访问 */"),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ListNode"),s(" head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 递归访问 head.val"),s(`
    `),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token punctuation"},"."),s("next"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"ListNode"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" val"),n("span",{class:"token punctuation"},";"),s(`
        ListNode`),n("span",{class:"token operator"},"*"),s(" next"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),s("ListNode"),n("span",{class:"token operator"},"*"),s(" head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),s("ListNode"),n("span",{class:"token operator"},"*"),s(" p "),n("span",{class:"token operator"},"="),s(" head"),n("span",{class:"token punctuation"},";"),s(" p "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},";"),s(" p "),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token operator"},"->"),s("next"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 迭代访问 p->val"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),s("ListNode"),n("span",{class:"token operator"},"*"),s(" head"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 递归访问 head->val"),s(`
    `),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),s("head"),n("span",{class:"token operator"},"->"),s("next"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("ul",null,[n("li",null,"二叉树遍历框架，典型的非线性递归遍历结构：")],-1),j=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"TreeNode"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" val"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token class-name"},"TreeNode"),s(" left"),n("span",{class:"token punctuation"},","),s(" right"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"TreeNode"),s(" root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"TreeNode"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" val"),n("span",{class:"token punctuation"},";"),s(`
    TreeNode`),n("span",{class:"token operator"},"*"),s(" left"),n("span",{class:"token punctuation"},";"),s(`
    TreeNode`),n("span",{class:"token operator"},"*"),s(" right"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),s("TreeNode"),n("span",{class:"token operator"},"*"),s(" root"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token operator"},"->"),s("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"traverse"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token operator"},"->"),s("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=p('<div class="hint-container tip"><p class="hint-container-title">递归问题总结</p><p>只要涉及递归的问题，都是树的问题。<br> 很多动态规划问题就是在遍历一棵树。<br> 回溯算法就是个 N 叉树的前后序遍历问题。</p></div><h4 id="_3-labuladong的刷题心得" tabindex="-1"><a class="header-anchor" href="#_3-labuladong的刷题心得" aria-hidden="true">#</a> 3. labuladong的刷题心得</h4><p>working on it...</p><h3 id="chap0-5-双指针与链表" tabindex="-1"><a class="header-anchor" href="#chap0-5-双指针与链表" aria-hidden="true">#</a> CHAP0.5- 双指针与链表</h3>',4),C={href:"https://leetcode.cn/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://labuladong.github.io/algo/di-ling-zh-bfe1b/shuang-zhi-0f7cc/#%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"},z=n("strong",null,"题解",-1),q=n("p",null,[s("链表使用"),n("code",null,"dummy"),s("节点： 降低代码复杂性，避免空指针。")],-1),V=n("blockquote",null,[n("p",null,[s("Q: 什么时候使用"),n("code",null,"dummy"),s("节点？"),n("br"),s(" A: 当需要创造一条新链表的时候，可以使用虚拟头结点简化边界情况的处理。")])],-1),I={href:"https://leetcode.cn/problems/partition-list/",target:"_blank",rel:"noopener noreferrer"},H={href:"https://labuladong.github.io/algo/di-ling-zh-bfe1b/shuang-zhi-0f7cc/#%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%86%E8%A7%A3",target:"_blank",rel:"noopener noreferrer"},P=n("strong",null,"题解",-1),F=n("div",{class:"hint-container danger"},[n("p",{class:"hint-container-title"},"易错"),n("p",null,[s("如果不断开原链表中的每个节点的 next 指针会出错，结果链表中会包含"),n("strong",null,"一个环"),s("。")])],-1),D=n("blockquote",null,[n("p",null,[s("如果需要把原链表的节点接到新链表上，而不是 new 新节点来组成新链表的话，那么"),n("strong",null,"断开节点和原链表之间的链接"),s("可能是必要的。")])],-1),K=n("p",null,"与第1题对比，本题可能出现环的原因在于，将原链表非最后一个元素放到了新的链表上，所以可能会出现环。而第1题总是会将原链表最后一个元素直接放入新的链表中，所以不会出现环。",-1),Q={href:"https://leetcode.cn/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://labuladong.github.io/algo/di-ling-zh-bfe1b/shuang-zhi-0f7cc/#%E5%90%88%E5%B9%B6-k-%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"},G=n("strong",null,"题解",-1),J={href:"https://labuladong.github.io/algo/di-yi-zhan-da78c/shou-ba-sh-daeca/er-cha-dui-1a386/",target:"_blank",rel:"noopener noreferrer"},M=n("p",null,"时间复杂度：working on it...",-1),O={href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/solutions/450350/shan-chu-lian-biao-de-dao-shu-di-nge-jie-dian-b-61/",target:"_blank",rel:"noopener noreferrer"},U=n("strong",null,"题解",-1),W=n("div",{class:"hint-container warning"},[n("p",{class:"hint-container-title"},"注意"),n("p",null,[s("删除倒数第N个节点，需要找到倒数第N+1个节点，所以用双指针时可以将second指针初始置为dummy节点，而first指针初始置为head节点。"),n("br"),s(" 如果不这样做，需要多做很多判断。")])],-1),X={href:"https://leetcode.cn/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},Y=n("div",{class:"hint-container danger"},[n("p",{class:"hint-container-title"},"重做")],-1),Z={href:"https://leetcode.cn/problems/intersection-of-two-linked-lists/",target:"_blank",rel:"noopener noreferrer"},$=n("p",null,"若相交，长短指针各走一次，第二次必在相交处相遇。",-1),nn=n("h3",{id:"chap0-8-双指针与数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#chap0-8-双指针与数组","aria-hidden":"true"},"#"),s(" CHAP0.8- 双指针与数组")],-1),sn=n("blockquote",null,[n("p",null,"在数组中并没有真正意义上的指针，但我们可以把索引当做数组中的指针，这样也可以在数组中施展双指针技巧。")],-1),an=n("ol",null,[n("li")],-1);function en(tn,on){const e=i("ExternalLinkIcon"),c=i("CodeTabs");return u(),d("div",null,[n("p",null,[s("这是一篇算法刷题笔记，主要轨迹按照"),n("a",v,[b,a(e)]),s("和"),n("a",m,[_,a(e)]),s("进行学习。")]),g,k(" more "),f,a(c,{id:"68",data:[{id:"java"},{id:"cpp"}]},{title0:t(({value:o,isActive:l})=>[s("java")]),title1:t(({value:o,isActive:l})=>[s("cpp")]),tab0:t(({value:o,isActive:l})=>[w]),tab1:t(({value:o,isActive:l})=>[y]),_:1}),A,a(c,{id:"83",data:[{id:"java"},{id:"cpp"}]},{title0:t(({value:o,isActive:l})=>[s("java")]),title1:t(({value:o,isActive:l})=>[s("cpp")]),tab0:t(({value:o,isActive:l})=>[x]),tab1:t(({value:o,isActive:l})=>[E]),_:1}),N,a(c,{id:"98",data:[{id:"java"},{id:"cpp"}]},{title0:t(({value:o,isActive:l})=>[s("java")]),title1:t(({value:o,isActive:l})=>[s("cpp")]),tab0:t(({value:o,isActive:l})=>[j]),tab1:t(({value:o,isActive:l})=>[B]),_:1}),L,n("ol",null,[n("li",null,[n("p",null,[s("合并两个有序链表("),n("a",C,[s("leetcode"),a(e)]),s(")")]),n("p",null,[n("a",T,[z,a(e)])]),q,V]),n("li",null,[n("p",null,[s("分隔链表("),n("a",I,[s("leetcode"),a(e)]),s(")")]),n("p",null,[n("a",H,[P,a(e)])]),F,D,K]),n("li",null,[n("p",null,[s("合并K个升序链表("),n("a",Q,[s("leetcode"),a(e)]),s(")")]),n("p",null,[n("a",S,[G,a(e)])]),n("blockquote",null,[n("p",null,[n("a",J,[s("优先级队列(二叉堆)"),a(e)]),s(" 总是将最小的数放到堆顶。")])]),M]),n("li",null,[n("p",null,[s("删除链表的倒数第 N 个结点("),n("a",O,[s("leetcode"),a(e)]),s(")")]),n("p",null,[n("a",R,[U,a(e)])]),W]),n("li",null,[n("p",null,[s("环形链表 II("),n("a",X,[s("leetcode"),a(e)]),s(")")]),Y]),n("li",null,[n("p",null,[s("相交链表("),n("a",Z,[s("leetcode"),a(e)]),s(")")]),$])]),nn,sn,an])}const pn=r(h,[["render",en],["__file","算法.html.vue"]]);export{pn as default};
